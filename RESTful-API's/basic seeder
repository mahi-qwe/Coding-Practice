package main

import (
	"fmt"
	"log"

	"gorm.io/driver/postgres"
	"gorm.io/gorm"
)

// User model
type User struct {
	ID       uint   `gorm:"primaryKey"`
	Name     string
	Email    string `gorm:"unique"`
	Password string
	Role     string
}

func main() {
	// Connect to PostgreSQL
	dsn := "host=localhost user=postgres password=yourpassword dbname=myapp port=5432 sslmode=disable"
	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		log.Fatal("failed to connect database: ", err)
	}

	// Auto-migrate models (create tables if not exist)
	err = db.AutoMigrate(&User{})
	if err != nil {
		log.Fatal("failed migration: ", err)
	}

	// Run Seeder
	seedUsers(db)

	fmt.Println("Database seeded successfully ðŸš€")
}

// Seeder function
func seedUsers(db *gorm.DB) {
	// Check if admin already exists
	var count int64
	db.Model(&User{}).Where("role = ?", "admin").Count(&count)

	if count == 0 {
		// Insert default admin
		admin := User{
			Name:     "Super Admin",
			Email:    "admin@example.com",
			Password: "hashedpassword123", // later weâ€™ll hash with bcrypt
			Role:     "admin",
		}
		db.Create(&admin)
		fmt.Println("Default admin created âœ…")
	} else {
		fmt.Println("Admin already exists, skipping seeder")
	}
}
