package main

import (
	"net/http"

	"github.com/gin-gonic/gin"
)

type User struct {
	ID    int    `json:"id"`
	Name  string `json:"name" binding:"required"`
	Email string `json:"email" binding:"required,email"`
}

var users = []User{}
var nextID = 1

func main() {
	r := gin.Default()

	r.GET("/users", func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{"users": users})
	})

	r.POST("/users", func(c *gin.Context) {
		var newUser User

		if err := c.ShouldBindJSON(&newUser); err != nil {
			c.JSON(http.StatusBadRequest, gin.H{
				"error": "Invalid request: " + err.Error(),
			})
			return
		}

		newUser.ID = nextID
		nextID++

		users = append(users, newUser)

		c.JSON(http.StatusCreated, gin.H{
			"message": "User created successfully",
			"user":    newUser,
		})
	})

	r.Run(":8080")
}

OUTPUT:-
POST request:
{
    "message": "User created successfully",
    "user": {
        "id": 1,
        "name": "Mahir",
        "email": "mahi@gmail.com"
    }
}
GET request:
{
  "users": [
    {
      "id": 1,
      "name": "Mahir",
      "email": "mahi@gmail.com"
    },
    {
      "id": 2,
      "name": "Lalu",
      "email": "lalu@gmail.com"
    }
  ]
}
