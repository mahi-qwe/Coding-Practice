// folder structure

src/
 ├── store/
 │    ├── actions.js
 │    ├── reducers.js
 │    └── store.js
 ├── App.jsx
 └── main.jsx

// first of all, install redux, react-redux, redux-thunk modules.
// actions.js (returns thunk function)

export const fetchData = () => {
    return async (dispatch) => {
        dispatch({ type: "FETCH_REQUEST" });

        try {
            const response = await fetch("https://jsonplaceholder.typicode.com/users");
            const data = await response.json();
            dispatch({ type: "FETCH_SUCCESS", payload: data });
        } catch (error) {
            dispatch({ type: "FETCH_FAIL", payload: error.message });
        }

    };
};

// reducers.js, contains reducer & initial state

const initialState = {
    loading: false,
    data: [],
    error: ""
};

export const dataReducer = (state = initialState, action) => {
    switch (action.type) {
        case "FETCH_REQUEST":
            return { ...state, loading: true };
        case "FETCH_SUCCESS":
            return { ...state, loading: false, data: action.payload, error: "" };
        case "FETCH_FAIL":
            return { ...state, loading: false, data: [], error: action.payload };
        default:
            return state;
    }
};

// store.js

import { createStore, applyMiddleware } from "redux";
import thunk from "redux-thunk";
import { dataReducer } from "./reducers";

const store = createStore(dataReducer, applyMiddleware(thunk));

export default store;

// main.jsx

import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App.jsx';
import { Provider } from 'react-redux';
import store from './store/store';

ReactDOM.createRoot(document.getElementById('root')).render(
  <Provider store={store}>
    <App />
  </Provider>
);

// App.jsx

import React, { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { fetchData } from './store/actions';

function App() {
    const dispatch = useDispatch();
    const { loading, data, error } = useSelector((state) => state);

    useEffect(() => {
        dispatch(fetchData());
    }, [dispatch]); // this only runs first time when the component mounts(change in dispatch is very rare)

    if (loading) return <h2>Loading...</h2>;
    if (error) return <h2>Error: {error}</h2>;

    return (
        <div>
            <h1>Fetched Users</h1>
            <ul>
                {data.map((user) => (
                    <li key={user.id}>{user.name}</li> // key is important, because we are rendering list of items to UI.
                ))}
            </ul>
        </div>
    );
}

export default App;
