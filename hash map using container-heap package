package main

import (
	"container/heap"
	"fmt"
)

type IntHeap []int

func (h IntHeap) Len() int {
	return len(h)
}

func (h IntHeap) Less(i, j int) bool {
	return h[i] > h[j]
}

func (h IntHeap) Swap(i, j int) {
	h[i], h[j] = h[j], h[i]
}

func (h *IntHeap) Push(value any) {
	*h = append(*h, value.(int))
}

func (h *IntHeap) Pop() any {
	old := *h
	n := len(old)
	last := old[n-1]
	*h = old[:n-1]
	return last
}

func main() {
	h := &IntHeap{2, 6, 10, 1, 8, 1}
	heap.Init(h)
	fmt.Print(*h)
	heap.Push(h, 2)
	fmt.Print(*h)

	value := heap.Pop(h).(int)
	fmt.Print(value)

	fmt.Print(*h)
}
